#!/bin/bash
#
# Amiya K Maji and Lev Gorenstein
# Copyright: Purdue University, 2023.
#
# This script assumes that you have Lmod and Anaconda installed on your system.
# You should not set $PYTHONPATH to base Anaconda installation.
# CONDA_ENVS_PATH must point to a writable directory.
#
# Run "conda-env-mod --help" for instructions.
#

# Configurable settings
#########################################
MODULE_TOP_DEF="$HOME/privatemodules" 	# Private modules reside here
					# (c.f. 'module load use.own')
MODULE_APP_DEF="conda-env" 		# Our generated modules go here
					# (a subdir in MODULE_TOP)
ENVIRONMENT_MODULE_TYPE="lmod"          # At present only Lmod is supported
					# May be extended to "tcl" later.
MODULE_INIT_SCRIPT="/etc/profile.d/modules.sh"
					# Script to initialize Lmod commands.
BASE_CONDA_MODULE_NAME="anaconda"	# This is what you call the base
					# anaconda module.
DEFAULT_TEMPLATE_DIR="templates/rcac"   #
                                        #
SCRIPT_TOP_DIR="$(realpath ${BASH_SOURCE[0]} | xargs dirname)"
                                        #
DEFAULT_MODULE_TEMPLATE="${SCRIPT_TOP_DIR}/${DEFAULT_TEMPLATE_DIR}/modules/${ENVIRONMENT_MODULE_TYPE}/default.sh"
                                        #
# end configurations                    #
#########################################

scriptname=${BASH_SOURCE##*/}

# Need this to initialize Lmod and 'module' command in this non-login shell!
if [ -f "${MODULE_INIT_SCRIPT}" ]; then
	source "${MODULE_INIT_SCRIPT}"
fi

# Tell 'less' to pass ANSI escape sequences (so we could use bold in help text)
export LESS="-R"

# ----------------------------------------------------------------------

function bold()
{
	tput bold; echo -n "$@"; tput sgr0;
}

function usage()
{
	cat <<-EOF

    This tool makes a minimal Anaconda environment and generates a module file
    for using it.

    $(bold Usage:) ${scriptname} <subcommand> <required argument> [optional argument(s)]
           ${scriptname} help

    $(bold Subcommands:) create, delete, module, kernel

    $(bold Required arguments:) 
        Specify only one of the following.
           -n|--name ENV_NAME          : name of the environment.
           -p|--prefix ENV_PATH        : location of the environment.

    $(bold Optional arguments:)
           -a|--appname APP_NAME       : name of the module corresponding
                                         to the environment.
                                         Default is '${MODULE_APP_DEF}'.	
           -b|--base-python            : use the Python from base Anaconda module (rarely needed)
           -m|--moduledir MODULE_DIR   : location of module file.
           -j|--jupyter                : generate a Jupyter kernel for this 
                                         environment (implies '--local-py').
           --local-py|--local-python
           --add-path |--add-to-path   : use the Python from the environment. (Now the default behavior)
           -y|--yes                    : assume "yes" to all internal questions.

    $(bold Examples:)
        1) Create an environment in the home directory:

               ${scriptname} create -n my_test

        2) Create an environment at a custom location, such as a group-shared
           directory:

               ${scriptname} create -p /my/project/dir/my_test

        3) Create an environment that can be used inside Jupyter Hub:

               ${scriptname} create -n my_test -j

        4) To use the environment, please read the instructions on the console
           after running any of the commands above:

               module use ${MODULE_TOP_DEF}
               module load ${MODULE_APP_DEF}/my_test-py3.6.4
               conda install ....
               pip install ....

           * Note: Do $(bold "NOT") use 'pip install --user' as it does not install 
             packages in the environment.

    (( Enter 'q' to exit from the help menu ))

	EOF
}

function create_env()
{
	#
	# Usage: create_env
	#
	if [[ ${#CONDA_ARGS[@]} -eq 0 ]]; then
		echo "Usage: create_env needs either a name or a prefix"
		exit 1
	fi

	#ENV_NAME="$1"
	if [ "${ENV_PREFIX}" != "" ]; then
		ENV_DIR="${ENV_PREFIX}"
	else
		env_list=$(conda env list)
		ENV_DIR=$(echo "${env_list}" | grep "${ENV_NAME} .*/${ENV_NAME}" | awk '{print $NF}')
	fi

	if [[ "${ENV_DIR}" != "" ]] && [[ -d "${ENV_DIR}" ]] ; then
		echo "Directory already exists: ${ENV_DIR}"
		echo "Please specify a different environment name or path."
		exit 1
	fi

	#
	# Now the actual conda create
	#
	echo conda create -q --copy "${CONDA_ARGS[@]}" python="${PY}" "${CONDA_XTRA[@]}"
	conda create -q --copy "${CONDA_ARGS[@]}" python="${PY}" "${CONDA_XTRA[@]}"
	status=$?

	env_list=$(conda env list)

	if [ $(echo "${env_list}" | grep -c "${ENV_NAME} .*/${ENV_NAME}") -gt 1 ]; then
		echo "Name matched more than one environment prefix or suffix."
		echo "You may need to fix the module file manually at: ${MODULE_DIR}"
	fi

	if [ ${status} -ne 0 ]; then
		echo "Failed to create environment: ${ENV_NAME}"
		exit 1
	else
		create_module "${ENV_NAME}"
		if [[ $Opt_JUPYTER -ne 0 ]]; then
			create_kernel "${ENV_NAME}"
		fi
		echo "Your environment \"${ENV_NAME}\" was created successfully."
	fi

}
# end create_env

function delete_env()
{
	#
	# Usage: delete_env
	#
	if [[ ${#CONDA_ARGS[@]} -eq 0 ]]; then
		echo "Usage: delete_env needs either a name or a prefix."
		exit 1
	fi
	#ENV_NAME="$1"
	if [ "${ENV_PREFIX}" != "" ]; then
		ENV_DIR="${ENV_PREFIX}"
	else
		env_list=$(conda env list)
		ENV_DIR=$(echo "${env_list}" | grep "${ENV_NAME} .*/${ENV_NAME}" | awk '{print $NF}')
	fi
	if [[ "${ENV_DIR}" == "" ]]; then
		echo -e "I could not find an environment: ${ENV_NAME}.\nAborting delete command."
		exit 1
	elif [[ ! -d "${ENV_DIR}/conda-meta" ]]; then
		echo -e "I could not find an environment at: ${ENV_DIR}.\nAborting delete command."
		exit 1
	fi

	# A chance to back things up.
	echo
	echo "It is recommended to save a list of installed packages using"
	echo "    'conda list -n ${ENV_NAME}'"
	echo
	while [[ $Opt_YES -eq 0 ]]; do
		read -er -p "Are you sure you want to continue? (y/n): " answer
		case "${answer,,}" in
			n|no) 		exit 2 ;;
			y|yes) 		break ;;
			*) 		echo "Invalid choice: $answer" ;;
		esac
	done

	# Now the actual deletion
	#
	echo conda-env remove "${CONDA_ARGS[@]}"
	conda-env remove "${CONDA_ARGS[@]}"
	status=$?

	if [ $status -ne 0 ]; then
		echo "Failed to remove environment: ${ENV_NAME}"
		exit 1
	elif [[ -d "${ENV_DIR}/conda-meta" ]]; then
		# User has answered 'no' to conda-env's prompt, bail out
		# TODO:	This assumption is not always correct. E.g. for 
		# 	a group-shared environment (-p /my/project/....) where
		# 	I don't have permissions to delete the env itself,
		# 	I may still want to delete my modules for that
		# 	environment.  The above simplistic check fails in
		# 	such scenario.
		# 	Need better check (or just remove module and kernel
		# 	anyways?)  The user can always recreate them ;-)
		exit
	else
		echo "Successfully removed environment: ${ENV_NAME}"
	fi

	# Delete the modulefile
	MODULE_FILE="${MODULE_DIR}/${ENV_NAME}-py${PY}.lua"
	echo "Deleting module file: ${MODULE_FILE//$HOME/\$HOME}"
	rm -f "${MODULE_FILE}"

	# Also delete Jupyter kernel.
	if [[ "${KERNEL_DIR}" != "" && -d "${KERNEL_DIR}" ]]; then
		echo "Deleting Jupyter kernel: ${KERNEL_DIR//$HOME/\$HOME}"
		rm -rf "${KERNEL_DIR}"
	fi

}
# end delete_env


function create_module()
{
	#
	# Usage: create_module
	#
	if [[ ${#CONDA_ARGS[@]} -eq 0 ]]; then
		echo "Usage: create_module needs either a name or a prefix."
		exit 1
	fi
	#ENV_NAME="$1"
	if [ "${ENV_PREFIX}" != "" ]; then
		ENV_DIR="${ENV_PREFIX}"
	else
		env_list=$(conda env list)
		ENV_DIR=$(echo "${env_list}" | grep "${ENV_NAME} .*/${ENV_NAME}" | awk '{print $NF}')
	fi
	if [[ "${ENV_DIR}" == "" ]] || [[ ! -d "${ENV_DIR}" ]]; then
		echo -e "I could not find a location for the environment: ${ENV_NAME} \nAborting module file creation."
		exit 1
	fi

	if [ ! -d "${MODULE_DIR}" ]; then
		mkdir -p "${MODULE_DIR}"
	fi

	if [ ! -f "${MODULE_TEMPLATE}" ]; then
		echo "Cannot locate module template: ${MODULE_TEMPLATE}"
		echo "Aborting module file generation."
		exit 1
	fi

	MODULE_FILE="${MODULE_DIR}/${ENV_NAME}-py${PY}.lua"
	CONDA_MODULE=$(module --redirect --terse list ${BASE_CONDA_MODULE_NAME} | grep "^${BASE_CONDA_MODULE_NAME}\/.*")

	source ${MODULE_TEMPLATE} > ${MODULE_FILE}

	# And concoct instructions for the user.
	# 'module use' is preferred, but fall back to 'use.own' if available
	USELINE="module use ${MODULE_TOP//$HOME/\$HOME}"
	HAVE_USEOWN=$(module --redirect -q avail use.own | grep -c use.own)
	if [[ "${MODULE_DIR}" =~ "${MODULE_TOP_DEF}/".* && "$HAVE_USEOWN" -gt 0 ]]; then
		USELINE="module load use.own"
	fi
	MSG=( "To use this environment, load the following modules:"
	      "    $USELINE"
	      "    module load ${MODULE_APP}/${ENV_NAME}-py${PY}"
	      "(then standard 'conda install' / 'pip install' / run scripts)"
	)
	boxify_text "${MSG[@]}"

}
# end create_module


function create_kernel()
{
	#
	# Usage: create_kernel
	#
	if [[ ${#CONDA_ARGS[@]} -eq 0 ]]; then
		echo "Usage: create_kernel needs either a name or a prefix."
		exit 1
	fi
	#ENV_NAME="$1"
	if [ "${ENV_PREFIX}" != "" ]; then
		ENV_DIR="${ENV_PREFIX}"
	else
		env_list=$(conda env list)
		ENV_DIR=$(echo "${env_list}" | grep "${ENV_NAME} .*/${ENV_NAME}" | awk '{print $NF}')
	fi
	if [[ "${ENV_DIR}" == "" || ! -d "${ENV_DIR}" ]]; then
		echo -e "I could not find a location for the environment: ${ENV_NAME} \nAborting Jupyter kernel creation."
		exit 1
	fi

	if [[ "${KERNEL_DIR}" == "" ]]; then
		echo -e "I could not find suitable location for Jupyter kernels \nAborting Jupyter kernel creation."
		exit 1
	fi

	if [ ! -d "${KERNEL_DIR}" ]; then
		mkdir -p "${KERNEL_DIR}" || exit 1
	fi

	DISPLAY_NAME="Python (My ${ENV_NAME} Kernel)"
	cat <<-EOF > "${KERNEL_FILE}"
		{
		 "display_name": "${DISPLAY_NAME}", 
		 "language": "python", 
		 "argv": [
		  "${ENV_DIR}/bin/python", 
		  "-m", 
		  "ipykernel_launcher", 
		  "-f", 
		  "{connection_file}"
		 ]
		}
	EOF

	# TODO: add icons!
	# 	logo-32x32.png
	# 	logo-64x64.png

	echo
	echo "Jupyter kernel created: \"${DISPLAY_NAME}\""
	MSG=( "We recommend installing packages into your kernel environment"
	      "via the command line (with 'conda install' or 'pip install')."

	)
	boxify_text "${MSG[@]}"

}
# end create_kernel


function boxify_text()
{
	#
	# Usage: boxify_text AAAA [BBB ...]
	#
	# Output:
	#	+------+
	#	| AAAA |
	#	| BBB  |
	#	+------+
	#
	local msg=("$@")
	local line longest width
	for line in "${msg[@]}"; do
		if [[ ${#line} -gt $width ]]; then
			longest="$line"
			width="${#line}"
		fi
	done
	echo "+-${longest//?/-}-+"
	for line in "${msg[@]}"; do
		printf '| %s%*s%s |\n' "$(tput bold)" "-$width" "$line" "$(tput sgr0)"
	done
	echo "+-${longest//?/-}-+"
}
# end boxify_text

# This function checks if Lmod is available and initialized.
#
function check_lmod_present()
{
	# First check Lmod is available and initialized
	#
	if ! command -v module &>/dev/null; then
		echo "Module command is not available. ${scriptname} depends on the Lmod environment module software."
		exit 1
	fi
	if command -V module | grep -q LMOD_CMD; then
		if [ "${LMOD_CMD}" == "" ]; then
			echo "Cannot find LMOD_CMD in your shell."
			echo "Is Lmod initialized correctly."
			exit 1
		elif [ ! -f "${LMOD_CMD}" ]; then
			echo "Cannot locate ${LMOD_CMD}."
			exit 1
		fi
	else
		echo "${scriptname} depends on the Lmod environment module software. Please make sure you have Lmod initialized."
		exit 1
	fi
}
# end check_lmod_present

# This function checks if the conda command is available in the user's shell.
#
function check_conda_present()
{
	if ! command -v conda &>/dev/null; then
		echo "${scriptname} needs 'conda'. Looks like the 'conda' command is not available."
		exit 1
	elif ! conda -V &>/dev/null; then
		echo "Cannot execte 'conda' command. Aborting."
		exit 1
	fi

	if [ "${BASE_CONDA_MODULE_NAME}" != "" ]; then
		HAVE_CONDA_MODULE=$(module --redirect --terse spider ${BASE_CONDA_MODULE_NAME} | grep -o ${BASE_CONDA_MODULE_NAME})
		if [ "${HAVE_CONDA_MODULE}" == "" ]; then
			echo "WARNING: Cannot find ${BASE_CONDA_MODULE_NAME} module. ${scriptname} may not work properly."
		fi
	else
		echo "WARNING: ${BASE_CONDA_MODULE_NAME} module is not defined. ${scriptname} may not work properly."
	fi
}
# end check_conda_present

# This function looks for key CONDA_* environment variables and sets them if needed.
#
function check_conda_variables()
{
	if [ "${CONDA_ENVS_PATH}" == "" ]; then
		osver=$(awk -v FS='=' '($1 == "ID"){os = $2};($1 == "VERSION_ID"){rel=$2}END{print os rel}' /etc/os-release | tr -d \")
		if [ "${osver}" == "" ]; then
			osver="unknown"
		fi
		conda_ver=$(conda -V |& grep -o '[0-9.]\+')
		echo "Setting CONDA_ENVS_PATH=${HOME}/.conda/envs/${osver}/conda-${conda_ver}"
		echo "New environments will be created in this directory unless --prefix is specified."
		export CONDA_ENVS_PATH="${HOME}/.conda/envs/${osver}/conda-${conda_ver}"
	fi

	if [ "${CONDA_PREFIX}" == "" ]; then
		# Set CONDA_PREFIX to base anaconda installation
		bindir=$(dirname $(command -v conda))
		base_conda_dir=$(realpath $bindir/..)
		if [ "${base_conda_dir}" != "" ]; then
			echo export CONDA_PREFIX="${base_conda_dir}"
			export CONDA_PREFIX="${base_conda_dir}"
		fi
	fi
}
# end check_conda_variables

# This function makes sure that the user environment is sane.
#
function check_user_env()
{
	if [ "${ENVIRONMENT_MODULE_TYPE^^}" == "LMOD" ]; then
		check_lmod_present
	fi

	check_conda_present
	check_conda_variables
}

# ----------------------------------------------------------------------


#
# Script starts here
#
if [ "$1" == "help" ]; then
	usage | less
	exit
fi

# Check user's env and set essential variables
#
check_user_env
export PYTHONNOUSERSITE=1 	# Ignore the creator's ~/.local/lib/pythonX.Y

PY=$(python -V 2>&1 | grep -o "^Python .*" | grep -o "[0-9]\(\.[0-9]\+\)\+")
PY_S=$(python -V 2>&1 | grep -o "^Python .*" | grep -o "[0-9]\.[0-9]\+")

if [ "$PY" == "" ]; then
	echo "Python version cannot be empty. Please verify."
	exit 1
fi

# Set initial values for flags
MODULE_TOP="${MODULE_TOP_DEF}"
MODULE_APP="${MODULE_APP_DEF}"
MODULE_TEMPLATE="${DEFAULT_MODULE_TEMPLATE}"
CONDA_ARGS=()
CONDA_XTRA=() 		# CONDA_ARGS are used for -p/-n/-y, XTRA is for packages
Opt_YES=0
#Opt_LOCAL_PY=0
Opt_LOCAL_PY=1      # local-python is now the default behavior
Opt_JUPYTER=0

# Where jupyter kernels might be.  Ask Jupyter if we can, or use defaults.
if command -v jupyter > /dev/null; then
	JUPYTER_DATADIR=$(jupyter --data-dir)
elif [[ -n $XDG_DATA_HOME ]]; then
	JUPYTER_DATADIR="$XDG_DATA_HOME/jupyter"
else
	JUPYTER_DATADIR="$HOME/.local/share/jupyter"
fi

# Parse command line
SUBCOMMAND="$1"
shift
TEMP=$(getopt -o a:hp:m:n:yjb --long appname:,help,prefix:,moduledir:,name:,yes,jupyter,local-py,local-python,add-path,add-to-path,base-python -- "$@")
eval set -- "$TEMP"
while true; do
	case "$1" in
		-a|--appname)
			MODULE_APP="$2"; shift 2 ;;
		-n|--name)
			ENV_NAME="$2"; shift 2 ;;
		-p|--prefix)
			ENV_PREFIX="$2" ; shift 2 ;;
		-m|--moduledir)
			MODULE_TOP="$2" ; shift 2 ;;
		-y|--yes)
			Opt_YES=1; shift ;;
		-j|--jupyter)
			Opt_JUPYTER=1; shift ;;
		-b|--base-python)
			Opt_LOCAL_PY=0; shift ;;
		--local-py|--local-python|--add-path|--add-to-path)
			Opt_LOCAL_PY=1; shift ;;
		--) shift ; break ;;
		*)  echo "Incorrect option." ;
			usage | less ; 
                        exit 1 ;;
	esac
done

# If we are given a prefix, trim trailing slashes, and do a sanity check.
# If necessary, bail out here to avoid confusing messages later.
if [ "${ENV_PREFIX}" != "" ]; then
	buf=$(echo "${ENV_PREFIX}" | sed -e 's:/*$::')
	if [[ -z "$buf" ]]; then
		echo "Not accepting '$ENV_PREFIX' for an environment prefix."
		exit 1
	fi
	ENV_PREFIX="$buf"
fi

# Logic for environment name and location
if [ "${ENV_PREFIX}" != "" ]; then
	CONDA_ARGS+=( --prefix "${ENV_PREFIX}" )
	if [ "${ENV_NAME}" == "" ]; then
		ENV_NAME="${ENV_PREFIX##*/}"
	fi
fi
if [[ "${ENV_NAME}" != "" ]] && [[ "${ENV_PREFIX}" == "" ]]; then
	CONDA_ARGS+=( --name "${ENV_NAME}" )
fi

# Assemble actual modulefile directory name
MODULE_DIR="${MODULE_TOP}/${MODULE_APP}"

# Ditto for Jupyter kernel
KERNEL_TOP="${JUPYTER_DATADIR}/kernels"
KERNEL_NAME="${ENV_NAME//[^-_.[:alnum:]]/_}" 	# Jupyter rules: allow alnum, -._
KERNEL_NAME="${KERNEL_NAME,,}" 			# Lower-case it (ipython does)
KERNEL_DIR="${KERNEL_TOP}/${KERNEL_NAME}"
KERNEL_FILE="${KERNEL_DIR}/kernel.json"


# If we make Jupyter kernel, this requires using local [i]python.
if [[ $Opt_JUPYTER -ne 0 ]]; then
	Opt_LOCAL_PY=1
	CONDA_XTRA+=( ipython ipykernel )
fi

# Say yes to the process?
if [[ $Opt_YES -ne 0 ]]; then
	CONDA_ARGS+=( --yes )
fi

# And... action!
case "$SUBCOMMAND" in
	create)
		echo "requested $SUBCOMMAND with arguments: $TEMP"
		if [[ "${ENV_NAME}" == "" ]] && [[ "${ENV_PREFIX}" == "" ]]; then
			echo "Please specify either an environment name OR a prefix."
			echo "Enter: '${scriptname} help' for usage instructions."
			exit
		fi
		create_env
		;;
	delete)
		echo "requested $SUBCOMMAND with arguments: $TEMP"
		if [[ "${ENV_NAME}" == "" ]] && [[ "${ENV_PREFIX}" == "" ]]; then
			echo "Please specify either an environment name OR a prefix."
			echo "Enter: '${scriptname} help' for usage instructions."
			exit
		fi
		delete_env
		;;
	module)
		echo "requested $SUBCOMMAND with arguments: $TEMP"
		if [[ "${ENV_NAME}" == "" ]] && [[ "${ENV_PREFIX}" == "" ]]; then
			echo "Please specify either an environment name OR a prefix."
			echo "Enter: '${scriptname} help' for usage instructions."
			exit
		fi
		create_module
		if [[ $Opt_JUPYTER -ne 0 ]]; then
			create_kernel
		fi
		;;
	kernel)
		echo "requested $SUBCOMMAND with arguments: $TEMP"
		if [[ "${ENV_NAME}" == "" ]] && [[ "${ENV_PREFIX}" == "" ]]; then
			echo "Please specify either an environment name OR a prefix."
			echo "Enter: '${scriptname} help' for usage instructions."
			exit
		fi
		create_kernel
		;;
	-h|--help|help)
		usage | less
		;;
	"")
		echo "You must specify a subcommand."
		echo "Enter: '${scriptname} help' for usage instructions."
		;;
	*)
		echo "Invalid subcommand: $@"
		echo "Enter: '${scriptname} help' for usage instructions."
		;;
esac
